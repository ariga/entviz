// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package entviz

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type Driver string

const (
	DriverSqlite     Driver = "SQLITE"
	DriverMysql      Driver = "MYSQL"
	DriverPostgresql Driver = "POSTGRESQL"
)

// ShareVisualizationMutationResponse is returned by ShareVisualizationMutation on success.
type ShareVisualizationMutationResponse struct {
	ShareVisualization ShareVisualizationMutationShareVisualizationShareVisualizationPayload `json:"shareVisualization"`
}

// GetShareVisualization returns ShareVisualizationMutationResponse.ShareVisualization, and is useful for accessing the field via an interface.
func (v *ShareVisualizationMutationResponse) GetShareVisualization() ShareVisualizationMutationShareVisualizationShareVisualizationPayload {
	return v.ShareVisualization
}

// ShareVisualizationMutationShareVisualizationShareVisualizationPayload includes the requested fields of the GraphQL type ShareVisualizationPayload.
type ShareVisualizationMutationShareVisualizationShareVisualizationPayload struct {
	Success bool `json:"success"`
}

// GetSuccess returns ShareVisualizationMutationShareVisualizationShareVisualizationPayload.Success, and is useful for accessing the field via an interface.
func (v *ShareVisualizationMutationShareVisualizationShareVisualizationPayload) GetSuccess() bool {
	return v.Success
}

// VisualizeMutationResponse is returned by VisualizeMutation on success.
type VisualizeMutationResponse struct {
	Visualize VisualizeMutationVisualizeVisualizationPayload `json:"visualize"`
}

// GetVisualize returns VisualizeMutationResponse.Visualize, and is useful for accessing the field via an interface.
func (v *VisualizeMutationResponse) GetVisualize() VisualizeMutationVisualizeVisualizationPayload {
	return v.Visualize
}

// VisualizeMutationVisualizeVisualizationPayload includes the requested fields of the GraphQL type VisualizationPayload.
type VisualizeMutationVisualizeVisualizationPayload struct {
	Node VisualizeMutationVisualizeVisualizationPayloadNodeVisualization `json:"node"`
}

// GetNode returns VisualizeMutationVisualizeVisualizationPayload.Node, and is useful for accessing the field via an interface.
func (v *VisualizeMutationVisualizeVisualizationPayload) GetNode() VisualizeMutationVisualizeVisualizationPayloadNodeVisualization {
	return v.Node
}

// VisualizeMutationVisualizeVisualizationPayloadNodeVisualization includes the requested fields of the GraphQL type Visualization.
type VisualizeMutationVisualizeVisualizationPayloadNodeVisualization struct {
	ExtID string `json:"extID"`
}

// GetExtID returns VisualizeMutationVisualizeVisualizationPayloadNodeVisualization.ExtID, and is useful for accessing the field via an interface.
func (v *VisualizeMutationVisualizeVisualizationPayloadNodeVisualization) GetExtID() string {
	return v.ExtID
}

// __ShareVisualizationMutationInput is used internally by genqlient
type __ShareVisualizationMutationInput struct {
	ExtID string `json:"extID"`
}

// GetExtID returns __ShareVisualizationMutationInput.ExtID, and is useful for accessing the field via an interface.
func (v *__ShareVisualizationMutationInput) GetExtID() string { return v.ExtID }

// __VisualizeMutationInput is used internally by genqlient
type __VisualizeMutationInput struct {
	Text   string `json:"text"`
	Driver Driver `json:"driver"`
}

// GetText returns __VisualizeMutationInput.Text, and is useful for accessing the field via an interface.
func (v *__VisualizeMutationInput) GetText() string { return v.Text }

// GetDriver returns __VisualizeMutationInput.Driver, and is useful for accessing the field via an interface.
func (v *__VisualizeMutationInput) GetDriver() Driver { return v.Driver }

func ShareVisualizationMutation(
	ctx context.Context,
	client graphql.Client,
	extID string,
) (*ShareVisualizationMutationResponse, error) {
	req := &graphql.Request{
		OpName: "ShareVisualizationMutation",
		Query: `
mutation ShareVisualizationMutation ($extID: String!) {
	shareVisualization(input: {fromID:$extID}) {
		success
	}
}
`,
		Variables: &__ShareVisualizationMutationInput{
			ExtID: extID,
		},
	}
	var err error

	var data ShareVisualizationMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func VisualizeMutation(
	ctx context.Context,
	client graphql.Client,
	text string,
	driver Driver,
) (*VisualizeMutationResponse, error) {
	req := &graphql.Request{
		OpName: "VisualizeMutation",
		Query: `
mutation VisualizeMutation ($text: String!, $driver: Driver!) {
	visualize(input: {text:$text,type:HCL,driver:$driver}) {
		node {
			extID
		}
	}
}
`,
		Variables: &__VisualizeMutationInput{
			Text:   text,
			Driver: driver,
		},
	}
	var err error

	var data VisualizeMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
